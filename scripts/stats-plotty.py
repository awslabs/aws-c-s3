#!/usr/bin/env python3
from argparse import ArgumentParser
import json
import plotly.graph_objects as go
from sys import stderr
from time import perf_counter

ARG_PARSER = ArgumentParser(description="Plot S3ClientStats")
ARG_PARSER.add_argument('--json-in', required=True, help="JSON file generated by logscrape.py")
ARG_PARSER.add_argument('--img-out', help="HTML file to write")


def log(msg: str):
    print(msg, file=stderr)


class PerfTimer:
    def __init__(self, name):
        self.name = name

    def __enter__(self):
        self.start = perf_counter()

    def __exit__(self, exc_type, exc_value, traceback):
        if exc_type is None:
            end = perf_counter()
            log(f"{self.name}: {end - self.start:.3f} sec")


args = ARG_PARSER.parse_args()

# Open JSON file
with PerfTimer('read json'):
    with open(args.json_in, 'r') as json_file:
        S3_RUN = json.load(json_file)

with PerfTimer('prep data'):
    raw_stats = S3_RUN['stats']
    plot_times = [i['time'] for i in raw_stats]
    plot_stats = {}
    for stat_name in ('preparing', 'queued', 'net_get', 'net_put', 'net_default', 'streaming_waiting', 'streaming_response'):
        plot_stats[stat_name] = [i[stat_name] for i in raw_stats]

with PerfTimer('plot'):
    fig = go.Figure()
    for stat_name, values in plot_stats.items():
        fig.add_trace(go.Scatter(x=plot_times, y=values, mode='lines', name=stat_name))
    
    fig.update_layout(
        title='S3ClientStats',
        xaxis_title='Time (s)',
        yaxis_title='Num Requests',
        legend_title='Legend',
        hovermode='x unified',
        legend=dict(x=1, y=1, traceorder='normal')
    )

if args.img_out:
    with PerfTimer('save-img'):
        fig.write_html(args.img_out)
else:
    fig.show()

