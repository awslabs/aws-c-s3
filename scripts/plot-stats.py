#!/usr/bin/env python3
from argparse import ArgumentParser
import json
import matplotlib.pyplot as plt
from sys import stderr
from time import perf_counter

ARG_PARSER = ArgumentParser(description="Plot S3ClientStats")
ARG_PARSER.add_argument('--json-in', required=True,
                        help="JSON file generated by logscrape.py")
ARG_PARSER.add_argument('--img-out', help="SVG file to write")


def log(msg: str):
    print(msg, file=stderr)


class PerfTimer:
    def __init__(self, name):
        self.name = name

    def __enter__(self):
        self.start = perf_counter()

    def __exit__(self, exc_type, exc_value, traceback):
        if exc_type is None:
            end = perf_counter()
            log(f"{self.name}: {end - self.start:.3f} sec")


args = ARG_PARSER.parse_args()

# Open JSON file
with PerfTimer('read json'):
    with open(args.json_in, 'r') as json_file:
        S3_RUN = json.load(json_file)

with PerfTimer('prep data'):
    raw_stats = S3_RUN['stats']
    plot_times = [i['time'] for i in raw_stats]
    plot_stats = {}
    for stat_name in ('preparing', 'queued', 'net_get', 'net_put', 'net_default', 'streaming_waiting', 'streaming_response'):
        plot_stats[stat_name] = [i[stat_name] for i in raw_stats]

with PerfTimer('plot'):
    fig, ax = plt.subplots(layout='constrained')
    ax.stackplot(plot_times, plot_stats.values(), labels=plot_stats.keys())
    ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
    ax.set_title('S3ClientStats')
    ax.set_xlabel('Time (s)')
    ax.set_ylabel('Num Requests')

if args.img_out:
    with PerfTimer('save-img'):
        img_fmt = args.img_out.split('.')[1]
        plt.savefig(args.img_out, format=img_fmt)
else:
    plt.show()

